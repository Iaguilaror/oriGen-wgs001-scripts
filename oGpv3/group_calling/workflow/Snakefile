import pandas as pd
configfile: "../config/config.yaml"

dataset = pd.read_csv(config["dataset"], sep="\t")
RUNIDS = dataset["runid"]
CODEIDS = dataset["codeid"]
CRAM_VERSIONS = dataset["cram_version"]
CHROMS = config["chroms"]
cram_version_lookup = dataset.set_index(["runid", "codeid"])["cram_version"]

ANNOVAR_DBS = {
    "refGene": "g",
    "cytoBand": "r",
    "dbnsfp31a_interpro": "f",
    "gnomad40_genome": "f",
    "clinvar_20221231": "f",
    "dbnsfp42a": "f",
    "avsnp150": "f",
    "intervar_20180118": "f",
    "revel": "f",
    "mcap": "f"
}

localrules: all, generate_sams_file

wildcard_constraints:
    varnum = "(_var[0-9]+)?"

def additional_threads(wildcards, threads):
    return max(threads - 1, 1)

def threads_minus_two(wildcards, threads):
    return max(threads - 2, 1)

rule all:
    input:
        expand("../results/FASE1_oriGen-1437_SNV{varnum}_{chrom}{ext}",
            varnum=[""] + list(map(lambda x: f"_var{x}", range(1,len(config["variations"])))) if "variations" in config else [""],
            chrom=CHROMS, ext=[".bcf", ".bcf.csi"]),
        expand("../results/FASE1_oriGen-1437_annoSNV{varnum}_{chrom}{ext}",
            varnum=[""] + list(map(lambda x: f"_var{x}", range(1,len(config["variations"])))) if "variations" in config else [""],
            chrom=CHROMS, ext=[".bcf", ".bcf.csi"])

rule generate_sams_file:
    input:
        crams = expand(config["cram_format"], zip, runid=RUNIDS, codeid=CODEIDS, cram_version=CRAM_VERSIONS),
        crais = expand(config["cram_format"] + ".crai", zip, runid=RUNIDS, codeid=CODEIDS, cram_version=CRAM_VERSIONS)
    output:
        crams = temp("../work/crams.txt"),
        crais = temp("../work/crais.txt")
    run:
        with open(output.crams, "w") as outf_crams:
            outf_crams.write("\n".join(input.crams))

        with open(output.crais, "w") as outf_crais:
            outf_crais.write("\n".join(input.crais))

def rm_cram_version(wildcards):
    cram = config["cram_format"].format(
        runid=wildcards.runid,
        codeid=wildcards.codeid,
        cram_version=cram_version_lookup.loc[wildcards.runid, wildcards.codeid]
    )
    return {
        "cram": cram,
        "crai": cram + ".crai"
    }

rule coverage_calc:
    input: unpack(rm_cram_version)
    output: temp("../work/{runid}/cov_{codeid}.txt")
    shell: '''
        samtools idxstats {input.cram} | head -n -1 | awk '{{sum+=$3+$4; refl+=$2}} END{{print sum/refl}}' > {output}
    '''

rule coverage_join:
    input: expand("../work/{runid}/cov_{codeid}.txt", zip, runid=RUNIDS, codeid=CODEIDS)
    output: temp("../work/covs.txt")
    shell: '''
        cat {input} > {output}
    '''

def get_variation(wildcards):
    if "variations" not in config:
        return ""
    if len(wildcards.varnum) > 0:
        return config["variations"][int(wildcards.varnum[4:])]
    else:
        return config["variations"][0]

rule group_snv_calling:
    input:
        unpack(lambda x: {"covs": "../work/covs.txt"} if config["calculate_coverage"] else {}),
        ref = config["ref_genome"],
        refi = config["ref_genome"] + ".fai",
        crams = "../work/crams.txt",
        crais = "../work/crais.txt",
    output:
        temp(directory("../work/snv-gt{varnum}/{chrom}"))
    params:
        region = config["region"] if "region" in config else "",
        extra_flags = get_variation
    threads: config["threads"]
    benchmark: "../benchmarks/group_snv_calling/group_snv_calling{varnum}-{chrom}.tsv"
    log: "../logs/group_snv_calling/group_snv_calling{varnum}-{chrom}.log"
    shell:  'graphtyper genotype {input.ref} ' + \
                '--sams={input.crams} ' + \
                '--sams_index={input.crais} ' + \
                ('--avg_cov_by_readlen={input.covs} ' if config["calculate_coverage"] else '') + \
                ('{params.extra_flags} ' if "variations" in config else '') + \
                ('--region={wildcards.chrom}:{params.region} ' if "region" in config else '--region={wildcards.chrom} ') + \
                '--threads={threads} ' + \
                '--output=$(realpath -sm --relative-to . {output}/../) ' + \
                '--force_no_copy_reference ' + \
                '--force_use_input_ref_for_cram_reading ' + \
                '--verbose > {log} 2>&1'

rule concat_snv:
    input: "../work/snv-gt{varnum}/{chrom}"
    output: pipe("../work/snv-gt{varnum}-{chrom}.vcf.gz")
    benchmark: "../benchmarks/concat_snv/concat_snv{varnum}-{chrom}.tsv"
    log: "../logs/concat_snv/concat_snv{varnum}-{chrom}.log"
    shell: '''
        bcftools concat                                \\
            --naive                                    \\
            -Oz                                        \\
            -f <(find {input} -name "*.vcf.gz" | sort) \\
            -o {output} > {log} 2>&1
    '''

rule norm_snv:
    input: 
        vcf = "../work/snv-gt{varnum}-{chrom}.vcf.gz",
        ref = config["ref_genome"]
    output:
        bcf = "../results/FASE1_oriGen-1437_SNV{varnum}_{chrom}.bcf",
        bcfi = "../results/FASE1_oriGen-1437_SNV{varnum}_{chrom}.bcf.csi"
    benchmark: "../benchmarks/norm_snv/norm_snv{varnum}-{chrom}.tsv"
    log: "../logs/norm_snv/norm_snv{varnum}-{chrom}.log"
    threads: 1
    params:
        athreads = additional_threads
    shell: '''
        bcftools norm                   \\
            -f {input.ref}              \\
            --write-index               \\
            -c w                        \\
            -o {output.bcf}             \\
            -Ob                         \\
            --threads {params.athreads} \\
            {input.vcf} > {log} 2>&1
    '''

rule split_multiallelic:
    input: "../results/FASE1_oriGen-1437_SNV{varnum}_{chrom}.bcf"
    output: pipe("../work/biallelic{varnum}_{chrom}")
    benchmark: "../benchmarks/split_multiallelic/split_multiallelic{varnum}-{chrom}.tsv"
    log: "../logs/split_multiallelic/split_multiallelic{varnum}-{chrom}.log"
    threads: 1
    shell: 'bcftools norm -N -m- --multi-overlaps . -Ou -o {output} {input} > {log} 2>&1'

rule norm_biallelic:
    input:
        ref = config["ref_genome"],
        biallelic = "../work/biallelic{varnum}_{chrom}"
    output:
        bcf = temp("../work/norm_biallelic{varnum}_{chrom}.bcf"),
        bcfi = temp("../work/norm_biallelic{varnum}_{chrom}.bcf.csi")
    benchmark: "../benchmarks/norm_biallelic/norm_biallelic{varnum}-{chrom}.tsv"
    log: "../logs/norm_biallelic/norm_biallelic{varnum}-{chrom}.log"
    threads: 1
    shell: 'bcftools norm -f {input.ref} -Ob -o {output.bcf} --write-index {input.biallelic} > {log} 2>&1'

rule drop_genotypes:
    input: "../work/norm_biallelic{varnum}_{chrom}.bcf",
    output: pipe("../work/nogts{varnum}_{chrom}")
    benchmark: "../benchmarks/drop_genotypes/drop_genotypes{varnum}-{chrom}.tsv"
    log: "../logs/drop_genotypes/drop_genotypes{varnum}-{chrom}.log"
    shell: "bcftools view -G -Ov {input} {output} > {log} 2>&1"

rule annotate:
    input:
        ref = config["ref_genome"],
        dbdir = "../resources/annovar_dbs/",
        #vcf = "../work/nogts{varnum}_{chrom}"
        bcf = "../work/norm_biallelic{varnum}_{chrom}.bcf"
    output:
        avinput = temp("../work/snv-anno{varnum}_{chrom}.avinput"),
        vcf = temp("../work/snv-anno{varnum}_{chrom}.hg38_multianno.vcf"),
        txt = temp("../work/snv-anno{varnum}_{chrom}.hg38_multianno.txt"),
    benchmark: "../benchmarks/annotate/annotate{varnum}-{chrom}.tsv"
    log: "../logs/annotate/annotate{varnum}-{chrom}.log"
    threads: config["anno_threads"]
    params:
        dbs = ",".join(ANNOVAR_DBS.keys()),
        ops = ",".join(ANNOVAR_DBS.values()),
        athreads = additional_threads
    shell: '''
            outfile={output.avinput}
            bcftools view -G -Ov {input.bcf} | \\
            table_annovar.pl \\
                --outfile "${{outfile%.*}}" \\
                --buildver hg38 \\
                --protocol {params.dbs} \\
                --operation {params.ops} \\
                --vcfinput \\
                --remove \\
                --thread {params.athreads} \\
                --maxgenethread {params.athreads} \\
                --polish \\
                /dev/stdin {input.dbdir} > {log} 2>&1
    '''

rule reheader_anno_snv:
    input:
        bcf = "../work/norm_biallelic{varnum}_{chrom}.bcf",
        bcfi = "../work/norm_biallelic{varnum}_{chrom}.bcf.csi",
        colmap = "../resources/column_remapping.txt",
        header = "../resources/vcf_info_header.txt",
        vcf = "../work/snv-anno{varnum}_{chrom}.hg38_multianno.vcf"
    output:
        bcf = "../results/FASE1_oriGen-1437_annoSNV{varnum}_{chrom}.bcf",
        bcfi = "../results/FASE1_oriGen-1437_annoSNV{varnum}_{chrom}.bcf.csi"
    benchmark: "../benchmarks/reheader_anno/reheader_anno{varnum}-{chrom}.tsv"
    log: "../logs/reheader_anno/reheader_anno{varnum}-{chrom}.log"
    threads: config["anno_threads"]
    priority: 50
    params:
        athreads = additional_threads
    shell: '''
            (
                bcftools view -Gh {input.bcf} | \\
                perl -ane '
                    if($f < 2) {{
                        if(/^##FILTER=/) {{ $f = 1 }}
                        elsif($f == 1) {{
                            $f = 2;
                            open($h, "<", "{input.header}") or die;
                            while($l = readline($h)) {{print "$l"}};
                            close($h);
                        }}
                    }}
                    print';
                
                cat {input.vcf} | \\
                perl -ane '
                    BEGIN {{
                        open($h, "<", "{input.colmap}") or die;
                        while($l = readline($h)) {{
                            chomp $l;
                            @a = split("\\t", $l);
                            $m{{$a[0]}} = $a[1];
                        }}
                        close($h);
                    }}
                    for $k (keys(%m)) {{
                        s/(?<=;)\\Q${{k}}\\E(?=\\=)/${{m{{$k}}}}/g
                    }}
                    print';
            ) | \\
                bcftools view \\
                    --write-index \\
                    --threads {params.athreads} \\
                    -Ob \\
                    -o {output.bcf} >> {log} 2>&1
    '''